--- ../src-base/minecraft/net/minecraft/world/storage/ThreadedFileIOBase.java
+++ ../src-work/minecraft/net/minecraft/world/storage/ThreadedFileIOBase.java
@@ -1,22 +1,40 @@
 package net.minecraft.world.storage;
 
-import com.google.common.collect.Lists;
-import java.util.Collections;
-import java.util.List;
+import com.google.common.collect.Queues;
+import gg.m2ke4u.skylight.WorkerWrapper;
+import java.util.Queue;
+import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
 
-public class ThreadedFileIOBase implements Runnable
+public class ThreadedFileIOBase
 {
     private static final ThreadedFileIOBase INSTANCE = new ThreadedFileIOBase();
-    private final List<IThreadedFileIO> threadedIOQueue = Collections.<IThreadedFileIO>synchronizedList(Lists.newArrayList());
+    private final Queue<IThreadedFileIO> threadedIOQueue = Queues.newConcurrentLinkedQueue();
     private volatile long writeQueuedCounter;
-    private volatile long savedIOCounter;
+    private final AtomicLong savedIOCounter = new AtomicLong();
     private volatile boolean isThreadWaiting;
 
+    private static final AtomicInteger counter = new AtomicInteger(0);
+    private static final Executor FILE_IO_EXECUTOR = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(), (r)->{
+        Thread worker = new Thread(r);
+        worker.setDaemon(true);
+        worker.setPriority(1);
+        worker.setName("File IO Worker # "+counter.getAndIncrement());
+        return worker;
+    });
+
     private ThreadedFileIOBase()
     {
-        Thread thread = new Thread(this, "File IO Thread");
-        thread.setPriority(1);
-        thread.start();
+        for (int i = 0; i < Runtime.getRuntime().availableProcessors(); i++) {
+            FILE_IO_EXECUTOR.execute(()->{
+                for (;;)
+                {
+                    this.processQueue();
+                }
+            });
+        }
     }
 
     public static ThreadedFileIOBase getThreadedIOInstance()
@@ -24,35 +42,19 @@
         return INSTANCE;
     }
 
-    public void run()
-    {
-        while (true)
-        {
-            this.processQueue();
-        }
-    }
-
     private void processQueue()
     {
-        for (int i = 0; i < this.threadedIOQueue.size(); ++i)
-        {
-            IThreadedFileIO ithreadedfileio = this.threadedIOQueue.get(i);
+        IThreadedFileIO ithreadedfileio;
+        while ((ithreadedfileio = this.threadedIOQueue.poll())!=null){
             boolean flag = ithreadedfileio.writeNextIO();
 
-            if (!flag)
+            if (flag)
             {
-                this.threadedIOQueue.remove(i--);
-                ++this.savedIOCounter;
+                this.threadedIOQueue.add(ithreadedfileio);
+                continue;
             }
 
-            try
-            {
-                Thread.sleep(this.isThreadWaiting ? 0L : 10L);
-            }
-            catch (InterruptedException interruptedexception1)
-            {
-                interruptedexception1.printStackTrace();
-            }
+            this.savedIOCounter.getAndIncrement();
         }
 
         if (this.threadedIOQueue.isEmpty())
@@ -81,7 +83,7 @@
     {
         this.isThreadWaiting = true;
 
-        while (this.writeQueuedCounter != this.savedIOCounter)
+        while (this.writeQueuedCounter != this.savedIOCounter.get())
         {
             Thread.sleep(10L);
         }
