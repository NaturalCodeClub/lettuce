--- ../src-base/minecraft/net/minecraft/nbt/NBTTagCompound.java
+++ ../src-work/minecraft/net/minecraft/nbt/NBTTagCompound.java
@@ -5,13 +5,8 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 import net.minecraft.crash.CrashReport;
@@ -25,7 +20,7 @@
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Pattern SIMPLE_VALUE = Pattern.compile("[A-Za-z0-9._+-]+");
-    private final Map<String, NBTBase> tagMap = Maps.<String, NBTBase>newHashMap();
+    private final Map<String, NBTBase> tagMap = new HashMap<>();
 
     void write(DataOutput output) throws IOException
     {
@@ -82,6 +77,7 @@
 
     public void setTag(String key, NBTBase value)
     {
+        if (value == null) throw new IllegalArgumentException("Invalid null NBT value with key " + value);
         this.tagMap.put(key, value);
     }
 
@@ -477,6 +473,7 @@
 
     private static byte readType(DataInput input, NBTSizeTracker sizeTracker) throws IOException
     {
+        sizeTracker.read(8);
         return input.readByte();
     }
 
@@ -487,6 +484,7 @@
 
     static NBTBase readNBT(byte id, String key, DataInput input, int depth, NBTSizeTracker sizeTracker) throws IOException
     {
+        sizeTracker.read(32); //Forge: 4 extra bytes for the object allocation.
         NBTBase nbtbase = NBTBase.createNewByType(id);
 
         try
