--- ../src-base/minecraft/net/minecraft/util/IntHashMap.java
+++ ../src-work/minecraft/net/minecraft/util/IntHashMap.java
@@ -19,21 +19,23 @@
     {
         return hash & slotCount - 1;
     }
-
+    private final Object mutex = new Object();
     @Nullable
     public V lookup(int hashEntry)
     {
-        int i = computeHash(hashEntry);
+        synchronized (mutex){
+            int i = computeHash(hashEntry);
 
-        for (IntHashMap.Entry<V> entry = this.slots[getSlotIndex(i, this.slots.length)]; entry != null; entry = entry.nextEntry)
-        {
-            if (entry.hashEntry == hashEntry)
+            for (IntHashMap.Entry<V> entry = this.slots[getSlotIndex(i, this.slots.length)]; entry != null; entry = entry.nextEntry)
             {
-                return entry.valueEntry;
+                if (entry.hashEntry == hashEntry)
+                {
+                    return entry.valueEntry;
+                }
             }
-        }
 
-        return (V)null;
+            return (V)null;
+        }
     }
 
     public boolean containsItem(int hashEntry)
@@ -44,78 +46,86 @@
     @Nullable
     final IntHashMap.Entry<V> lookupEntry(int hashEntry)
     {
-        int i = computeHash(hashEntry);
+        synchronized (mutex){
+            int i = computeHash(hashEntry);
 
-        for (IntHashMap.Entry<V> entry = this.slots[getSlotIndex(i, this.slots.length)]; entry != null; entry = entry.nextEntry)
-        {
-            if (entry.hashEntry == hashEntry)
+            for (IntHashMap.Entry<V> entry = this.slots[getSlotIndex(i, this.slots.length)]; entry != null; entry = entry.nextEntry)
             {
-                return entry;
+                if (entry.hashEntry == hashEntry)
+                {
+                    return entry;
+                }
             }
-        }
 
-        return null;
+            return null;
+        }
     }
 
     public void addKey(int hashEntry, V valueEntry)
     {
-        int i = computeHash(hashEntry);
-        int j = getSlotIndex(i, this.slots.length);
+        synchronized (mutex){
+            int i = computeHash(hashEntry);
+            int j = getSlotIndex(i, this.slots.length);
 
-        for (IntHashMap.Entry<V> entry = this.slots[j]; entry != null; entry = entry.nextEntry)
-        {
-            if (entry.hashEntry == hashEntry)
+            for (IntHashMap.Entry<V> entry = this.slots[j]; entry != null; entry = entry.nextEntry)
             {
-                entry.valueEntry = valueEntry;
-                return;
+                if (entry.hashEntry == hashEntry)
+                {
+                    entry.valueEntry = valueEntry;
+                    return;
+                }
             }
-        }
 
-        this.insert(i, hashEntry, valueEntry, j);
+            this.insert(i, hashEntry, valueEntry, j);
+        }
     }
 
     private void grow(int p_76047_1_)
     {
-        IntHashMap.Entry<V>[] entry = this.slots;
-        int i = entry.length;
+        synchronized (mutex){
+            IntHashMap.Entry<V>[] entry = this.slots;
+            int i = entry.length;
 
-        if (i == 1073741824)
-        {
-            this.threshold = Integer.MAX_VALUE;
+            if (i == 1073741824)
+            {
+                this.threshold = Integer.MAX_VALUE;
+            }
+            else
+            {
+                IntHashMap.Entry<V>[] entry1 = new IntHashMap.Entry[p_76047_1_];
+                this.copyTo(entry1);
+                this.slots = entry1;
+                this.threshold = (int)((float)p_76047_1_ * this.growFactor);
+            }
         }
-        else
-        {
-            IntHashMap.Entry<V>[] entry1 = new IntHashMap.Entry[p_76047_1_];
-            this.copyTo(entry1);
-            this.slots = entry1;
-            this.threshold = (int)((float)p_76047_1_ * this.growFactor);
-        }
     }
 
     private void copyTo(IntHashMap.Entry<V>[] p_76048_1_)
     {
-        IntHashMap.Entry<V>[] entry = this.slots;
-        int i = p_76048_1_.length;
+        synchronized (mutex){
+            IntHashMap.Entry<V>[] entry = this.slots;
+            int i = p_76048_1_.length;
 
-        for (int j = 0; j < entry.length; ++j)
-        {
-            IntHashMap.Entry<V> entry1 = entry[j];
-
-            if (entry1 != null)
+            for (int j = 0; j < entry.length; ++j)
             {
-                entry[j] = null;
+                IntHashMap.Entry<V> entry1 = entry[j];
 
-                while (true)
+                if (entry1 != null)
                 {
-                    IntHashMap.Entry<V> entry2 = entry1.nextEntry;
-                    int k = getSlotIndex(entry1.slotHash, i);
-                    entry1.nextEntry = p_76048_1_[k];
-                    p_76048_1_[k] = entry1;
-                    entry1 = entry2;
+                    entry[j] = null;
 
-                    if (entry2 == null)
+                    while (true)
                     {
-                        break;
+                        IntHashMap.Entry<V> entry2 = entry1.nextEntry;
+                        int k = getSlotIndex(entry1.slotHash, i);
+                        entry1.nextEntry = p_76048_1_[k];
+                        p_76048_1_[k] = entry1;
+                        entry1 = entry2;
+
+                        if (entry2 == null)
+                        {
+                            break;
+                        }
                     }
                 }
             }
@@ -125,126 +135,134 @@
     @Nullable
     public V removeObject(int o)
     {
-        IntHashMap.Entry<V> entry = this.removeEntry(o);
-        return (V)(entry == null ? null : entry.valueEntry);
+        synchronized (mutex){
+            IntHashMap.Entry<V> entry = this.removeEntry(o);
+            return (V)(entry == null ? null : entry.valueEntry);
+        }
     }
 
     @Nullable
     final IntHashMap.Entry<V> removeEntry(int p_76036_1_)
     {
-        int i = computeHash(p_76036_1_);
-        int j = getSlotIndex(i, this.slots.length);
-        IntHashMap.Entry<V> entry = this.slots[j];
-        IntHashMap.Entry<V> entry1;
-        IntHashMap.Entry<V> entry2;
+        synchronized (mutex){
+            int i = computeHash(p_76036_1_);
+            int j = getSlotIndex(i, this.slots.length);
+            IntHashMap.Entry<V> entry = this.slots[j];
+            IntHashMap.Entry<V> entry1;
+            IntHashMap.Entry<V> entry2;
 
-        for (entry1 = entry; entry1 != null; entry1 = entry2)
-        {
-            entry2 = entry1.nextEntry;
-
-            if (entry1.hashEntry == p_76036_1_)
+            for (entry1 = entry; entry1 != null; entry1 = entry2)
             {
-                --this.count;
+                entry2 = entry1.nextEntry;
 
-                if (entry == entry1)
+                if (entry1.hashEntry == p_76036_1_)
                 {
-                    this.slots[j] = entry2;
+                    --this.count;
+
+                    if (entry == entry1)
+                    {
+                        this.slots[j] = entry2;
+                    }
+                    else
+                    {
+                        entry.nextEntry = entry2;
+                    }
+
+                    return entry1;
                 }
-                else
-                {
-                    entry.nextEntry = entry2;
-                }
 
-                return entry1;
+                entry = entry1;
             }
 
-            entry = entry1;
+            return entry1;
         }
-
-        return entry1;
     }
 
     public void clearMap()
     {
-        IntHashMap.Entry<V>[] entry = this.slots;
+        synchronized (mutex){
+            IntHashMap.Entry<V>[] entry = this.slots;
 
-        for (int i = 0; i < entry.length; ++i)
-        {
-            entry[i] = null;
-        }
+            for (int i = 0; i < entry.length; ++i)
+            {
+                entry[i] = null;
+            }
 
-        this.count = 0;
+            this.count = 0;
+        }
     }
 
     private void insert(int p_76040_1_, int p_76040_2_, V p_76040_3_, int p_76040_4_)
     {
-        IntHashMap.Entry<V> entry = this.slots[p_76040_4_];
-        this.slots[p_76040_4_] = new IntHashMap.Entry(p_76040_1_, p_76040_2_, p_76040_3_, entry);
+        synchronized (mutex){
+            IntHashMap.Entry<V> entry = this.slots[p_76040_4_];
+            this.slots[p_76040_4_] = new IntHashMap.Entry(p_76040_1_, p_76040_2_, p_76040_3_, entry);
 
-        if (this.count++ >= this.threshold)
-        {
-            this.grow(2 * this.slots.length);
+            if (this.count++ >= this.threshold)
+            {
+                this.grow(2 * this.slots.length);
+            }
         }
     }
 
     static class Entry<V>
+    {
+        final int hashEntry;
+        V valueEntry;
+        IntHashMap.Entry<V> nextEntry;
+        final int slotHash;
+
+        Entry(int p_i1552_1_, int p_i1552_2_, V p_i1552_3_, IntHashMap.Entry<V> p_i1552_4_)
         {
-            final int hashEntry;
-            V valueEntry;
-            IntHashMap.Entry<V> nextEntry;
-            final int slotHash;
+            this.valueEntry = p_i1552_3_;
+            this.nextEntry = p_i1552_4_;
+            this.hashEntry = p_i1552_2_;
+            this.slotHash = p_i1552_1_;
+        }
 
-            Entry(int p_i1552_1_, int p_i1552_2_, V p_i1552_3_, IntHashMap.Entry<V> p_i1552_4_)
-            {
-                this.valueEntry = p_i1552_3_;
-                this.nextEntry = p_i1552_4_;
-                this.hashEntry = p_i1552_2_;
-                this.slotHash = p_i1552_1_;
-            }
+        public final int getHash()
+        {
+            return this.hashEntry;
+        }
 
-            public final int getHash()
-            {
-                return this.hashEntry;
-            }
+        public final V getValue()
+        {
+            return this.valueEntry;
+        }
 
-            public final V getValue()
+        public final boolean equals(Object p_equals_1_)
+        {
+            if (!(p_equals_1_ instanceof IntHashMap.Entry))
             {
-                return this.valueEntry;
+                return false;
             }
-
-            public final boolean equals(Object p_equals_1_)
+            else
             {
-                if (!(p_equals_1_ instanceof IntHashMap.Entry))
+                IntHashMap.Entry<V> entry = (IntHashMap.Entry)p_equals_1_;
+
+                if (this.hashEntry == entry.hashEntry)
                 {
-                    return false;
-                }
-                else
-                {
-                    IntHashMap.Entry<V> entry = (IntHashMap.Entry)p_equals_1_;
+                    Object object = this.getValue();
+                    Object object1 = entry.getValue();
 
-                    if (this.hashEntry == entry.hashEntry)
+                    if (object == object1 || object != null && object.equals(object1))
                     {
-                        Object object = this.getValue();
-                        Object object1 = entry.getValue();
-
-                        if (object == object1 || object != null && object.equals(object1))
-                        {
-                            return true;
-                        }
+                        return true;
                     }
-
-                    return false;
                 }
-            }
 
-            public final int hashCode()
-            {
-                return IntHashMap.computeHash(this.hashEntry);
+                return false;
             }
+        }
 
-            public final String toString()
-            {
-                return this.getHash() + "=" + this.getValue();
-            }
+        public final int hashCode()
+        {
+            return IntHashMap.computeHash(this.hashEntry);
         }
+
+        public final String toString()
+        {
+            return this.getHash() + "=" + this.getValue();
+        }
+    }
 }
