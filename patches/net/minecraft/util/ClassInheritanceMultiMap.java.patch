--- ../src-base/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
+++ ../src-work/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
@@ -4,6 +4,8 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import net.himeki.mcmtfabric.parallelised.ConcurrentCollections;
+
 import java.util.AbstractSet;
 import java.util.Collections;
 import java.util.Iterator;
@@ -13,11 +15,12 @@
 
 public class ClassInheritanceMultiMap<T> extends AbstractSet<T>
 {
-    private static final Set < Class<? >> ALL_KNOWN = Sets. < Class<? >> newHashSet();
-    private final Map < Class<?>, List<T >> map = Maps. < Class<?>, List<T >> newHashMap();
+    // Forge: Use concurrent collection to allow creating chunks from multiple threads safely
+    private static final Set < Class<? >> ALL_KNOWN = Collections.newSetFromMap(new java.util.concurrent.ConcurrentHashMap<Class<?>, Boolean>());
+    private final Map < Class<?>, List<T >> map = Maps. < Class<?>, List<T >> newConcurrentMap();
     private final Set < Class<? >> knownKeys = Sets. < Class<? >> newIdentityHashSet();
     private final Class<T> baseClass;
-    private final List<T> values = Lists.<T>newArrayList();
+    private final List<T> values = ConcurrentCollections.newArrayList();
 
     public ClassInheritanceMultiMap(Class<T> baseClassIn)
     {
@@ -43,16 +46,20 @@
             }
         }
 
-        this.knownKeys.add(clazz);
+        synchronized (this.knownKeys){
+            this.knownKeys.add(clazz);
+        }
     }
 
     protected Class<?> initializeClassLookup(Class<?> clazz)
     {
         if (this.baseClass.isAssignableFrom(clazz))
         {
-            if (!this.knownKeys.contains(clazz))
-            {
-                this.createLookup(clazz);
+            synchronized (this.knownKeys){
+                if (!this.knownKeys.contains(clazz))
+                {
+                    this.createLookup(clazz);
+                }
             }
 
             return clazz;
@@ -65,24 +72,27 @@
 
     public boolean add(T p_add_1_)
     {
-        for (Class<?> oclass : this.knownKeys)
-        {
-            if (oclass.isAssignableFrom(p_add_1_.getClass()))
+        synchronized (this.knownKeys){
+            for (Class<?> oclass : this.knownKeys)
             {
-                this.addForClass(p_add_1_, oclass);
+                if (oclass.isAssignableFrom(p_add_1_.getClass()))
+                {
+                    this.addForClass(p_add_1_, oclass);
+                }
             }
         }
-
         return true;
     }
 
     private void addForClass(T value, Class<?> parentClass)
     {
-        List<T> list = (List)this.map.get(parentClass);
+        List<T> list = this.map.get(parentClass);
 
         if (list == null)
         {
-            this.map.put(parentClass, Lists.newArrayList(value));
+            List<T> newList = ConcurrentCollections.newArrayList();
+            newList.add(value);
+            this.map.put(parentClass,newList);
         }
         else
         {
@@ -95,15 +105,17 @@
         T t = (T)p_remove_1_;
         boolean flag = false;
 
-        for (Class<?> oclass : this.knownKeys)
-        {
-            if (oclass.isAssignableFrom(t.getClass()))
+        synchronized (this.knownKeys){
+            for (Class<?> oclass : this.knownKeys)
             {
-                List<T> list = (List)this.map.get(oclass);
-
-                if (list != null && list.remove(t))
+                if (oclass.isAssignableFrom(t.getClass()))
                 {
-                    flag = true;
+                    List<T> list = this.map.get(oclass);
+
+                    if (list != null && list.remove(t))
+                    {
+                        flag = true;
+                    }
                 }
             }
         }
@@ -122,16 +134,14 @@
         {
             public Iterator<S> iterator()
             {
-                List<T> list = (List)ClassInheritanceMultiMap.this.map.get(ClassInheritanceMultiMap.this.initializeClassLookup(clazz));
-
-                if (list == null)
-                {
-                    return Collections.<S>emptyIterator();
-                }
-                else
-                {
+                // CatServer start - Optimization from Foamfix
+                Class c = ClassInheritanceMultiMap.this.initializeClassLookup(clazz);
+                List<T> list = ClassInheritanceMultiMap.this.map.get(c);
+                if (list == null) {
+                    return Collections.emptyIterator();
+                } else {
                     Iterator<T> iterator = list.iterator();
-                    return Iterators.filter(iterator, clazz);
+                    return clazz == c ? (Iterator<S>) iterator : Iterators.filter(iterator, clazz);
                 }
             }
         };
