--- ../src-base/minecraft/net/minecraft/block/BlockPlanks.java
+++ ../src-work/minecraft/net/minecraft/block/BlockPlanks.java
@@ -15,23 +15,23 @@
 
 public class BlockPlanks extends Block
 {
-    public static final PropertyEnum<BlockPlanks.EnumType> VARIANT = PropertyEnum.<BlockPlanks.EnumType>create("variant", BlockPlanks.EnumType.class);
+    public static final PropertyEnum<EnumType> VARIANT = PropertyEnum.<EnumType>create("variant", EnumType.class);
 
     public BlockPlanks()
     {
         super(Material.WOOD);
-        this.setDefaultState(this.blockState.getBaseState().withProperty(VARIANT, BlockPlanks.EnumType.OAK));
+        this.setDefaultState(this.blockState.getBaseState().withProperty(VARIANT, EnumType.OAK));
         this.setCreativeTab(CreativeTabs.BUILDING_BLOCKS);
     }
 
     public int damageDropped(IBlockState state)
     {
-        return ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMetadata();
+        return ((EnumType)state.getValue(VARIANT)).getMetadata();
     }
 
     public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items)
     {
-        for (BlockPlanks.EnumType blockplanks$enumtype : BlockPlanks.EnumType.values())
+        for (EnumType blockplanks$enumtype : EnumType.values())
         {
             items.add(new ItemStack(this, 1, blockplanks$enumtype.getMetadata()));
         }
@@ -39,17 +39,17 @@
 
     public IBlockState getStateFromMeta(int meta)
     {
-        return this.getDefaultState().withProperty(VARIANT, BlockPlanks.EnumType.byMetadata(meta));
+        return this.getDefaultState().withProperty(VARIANT, EnumType.byMetadata(meta));
     }
 
     public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos)
     {
-        return ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMapColor();
+        return ((EnumType)state.getValue(VARIANT)).getMapColor();
     }
 
     public int getMetaFromState(IBlockState state)
     {
-        return ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMetadata();
+        return ((EnumType)state.getValue(VARIANT)).getMetadata();
     }
 
     protected BlockStateContainer createBlockState()
@@ -66,7 +66,7 @@
         ACACIA(4, "acacia", MapColor.ADOBE),
         DARK_OAK(5, "dark_oak", "big_oak", MapColor.BROWN);
 
-        private static final BlockPlanks.EnumType[] META_LOOKUP = new BlockPlanks.EnumType[values().length];
+        private static final EnumType[] META_LOOKUP = new EnumType[values().length];
         private final int meta;
         private final String name;
         private final String unlocalizedName;
@@ -100,7 +100,7 @@
             return this.name;
         }
 
-        public static BlockPlanks.EnumType byMetadata(int meta)
+        public static EnumType byMetadata(int meta)
         {
             if (meta < 0 || meta >= META_LOOKUP.length)
             {
@@ -122,7 +122,7 @@
 
         static
         {
-            for (BlockPlanks.EnumType blockplanks$enumtype : values())
+            for (EnumType blockplanks$enumtype : values())
             {
                 META_LOOKUP[blockplanks$enumtype.getMetadata()] = blockplanks$enumtype;
             }
