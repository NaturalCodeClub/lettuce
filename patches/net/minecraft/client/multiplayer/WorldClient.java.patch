--- ../src-base/minecraft/net/minecraft/client/multiplayer/WorldClient.java
+++ ../src-work/minecraft/net/minecraft/client/multiplayer/WorldClient.java
@@ -60,17 +60,19 @@
 
     public WorldClient(NetHandlerPlayClient netHandler, WorldSettings settings, int dimension, EnumDifficulty difficulty, Profiler profilerIn)
     {
-        super(new SaveHandlerMP(), new WorldInfo(settings, "MpServer"), DimensionType.getById(dimension).createDimension(), profilerIn, true);
+        super(new SaveHandlerMP(), new WorldInfo(settings, "MpServer"), net.minecraftforge.common.DimensionManager.createProviderFor(dimension), profilerIn, true);
         this.ambienceTicks = this.rand.nextInt(12000);
         this.visibleChunks = Sets.<ChunkPos>newHashSet();
         this.connection = netHandler;
         this.getWorldInfo().setDifficulty(difficulty);
-        this.setSpawnPoint(new BlockPos(8, 64, 8));
         this.provider.setWorld(this);
+        this.setSpawnPoint(new BlockPos(8, 64, 8)); //Forge: Moved below registerWorld to prevent NPE in our redirect.
         this.chunkProvider = this.createChunkProvider();
         this.mapStorage = new SaveDataMemoryStorage();
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
+        this.initCapabilities();
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(this));
     }
 
     public void tick()
@@ -82,9 +84,6 @@
         {
             this.setWorldTime(this.getWorldTime() + 1L);
         }
-
-        this.profiler.startSection("reEntryProcessing");
-
         for (int i = 0; i < 10 && !this.entitySpawnQueue.isEmpty(); ++i)
         {
             Entity entity = this.entitySpawnQueue.iterator().next();
@@ -95,12 +94,8 @@
                 this.spawnEntity(entity);
             }
         }
-
-        this.profiler.endStartSection("chunkCache");
         this.clientChunkProvider.tick();
-        this.profiler.endStartSection("blocks");
         this.updateBlocks();
-        this.profiler.endSection();
     }
 
     public void invalidateBlockReceiveRegion(int x1, int y1, int z1, int x2, int y2, int z2)
@@ -113,7 +108,7 @@
         return this.clientChunkProvider;
     }
 
-    protected boolean isChunkLoaded(int x, int z, boolean allowEmpty)
+    public boolean isChunkLoaded(int x, int z, boolean allowEmpty)
     {
         return allowEmpty || !this.getChunkProvider().provideChunk(x, z).isEmpty();
     }
@@ -122,7 +117,6 @@
     {
         this.visibleChunks.clear();
         int i = this.mc.gameSettings.renderDistanceChunks;
-        this.profiler.startSection("buildList");
         int j = MathHelper.floor(this.mc.player.posX / 16.0D);
         int k = MathHelper.floor(this.mc.player.posZ / 16.0D);
 
@@ -133,8 +127,6 @@
                 this.visibleChunks.add(new ChunkPos(l + j, i1 + k));
             }
         }
-
-        this.profiler.endSection();
     }
 
     protected void updateBlocks()
@@ -161,10 +153,8 @@
             {
                 int j = chunkpos.x * 16;
                 int k = chunkpos.z * 16;
-                this.profiler.startSection("getChunk");
                 Chunk chunk = this.getChunkFromChunkCoords(chunkpos.x, chunkpos.z);
                 this.playMoodSoundAndCheckLight(j, k, chunk);
-                this.profiler.endSection();
                 this.previousActiveChunkSet.add(chunkpos);
                 ++i;
 
