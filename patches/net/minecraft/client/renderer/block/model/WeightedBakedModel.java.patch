--- ../src-base/minecraft/net/minecraft/client/renderer/block/model/WeightedBakedModel.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/block/model/WeightedBakedModel.java
@@ -16,10 +16,10 @@
 public class WeightedBakedModel implements IBakedModel
 {
     private final int totalWeight;
-    private final List<WeightedBakedModel.WeightedModel> models;
+    private final List<WeightedModel> models;
     private final IBakedModel baseModel;
 
-    public WeightedBakedModel(List<WeightedBakedModel.WeightedModel> modelsIn)
+    public WeightedBakedModel(List<WeightedModel> modelsIn)
     {
         this.models = modelsIn;
         this.totalWeight = WeightedRandom.getTotalWeight(modelsIn);
@@ -28,7 +28,7 @@
 
     private IBakedModel getRandomModel(long p_188627_1_)
     {
-        return ((WeightedBakedModel.WeightedModel)WeightedRandom.getRandomItem(this.models, Math.abs((int)p_188627_1_ >> 16) % this.totalWeight)).model;
+        return ((WeightedModel)WeightedRandom.getRandomItem(this.models, Math.abs((int)p_188627_1_ >> 16) % this.totalWeight)).model;
     }
 
     public List<BakedQuad> getQuads(@Nullable IBlockState state, @Nullable EnumFacing side, long rand)
@@ -41,6 +41,10 @@
         return this.baseModel.isAmbientOcclusion();
     }
 
+    public boolean isAmbientOcclusion(IBlockState state) {
+        return this.baseModel.isAmbientOcclusion(state);
+    }
+
     public boolean isGui3d()
     {
         return this.baseModel.isGui3d();
@@ -69,11 +73,11 @@
     @SideOnly(Side.CLIENT)
     public static class Builder
         {
-            private final List<WeightedBakedModel.WeightedModel> listItems = Lists.<WeightedBakedModel.WeightedModel>newArrayList();
+            private final List<WeightedModel> listItems = Lists.<WeightedModel>newArrayList();
 
-            public WeightedBakedModel.Builder add(IBakedModel model, int weight)
+            public Builder add(IBakedModel model, int weight)
             {
-                this.listItems.add(new WeightedBakedModel.WeightedModel(model, weight));
+                this.listItems.add(new WeightedModel(model, weight));
                 return this;
             }
 
@@ -90,7 +94,7 @@
         }
 
     @SideOnly(Side.CLIENT)
-    static class WeightedModel extends WeightedRandom.Item implements Comparable<WeightedBakedModel.WeightedModel>
+    static class WeightedModel extends WeightedRandom.Item implements Comparable<WeightedModel>
         {
             protected final IBakedModel model;
 
@@ -100,7 +104,7 @@
                 this.model = modelIn;
             }
 
-            public int compareTo(WeightedBakedModel.WeightedModel p_compareTo_1_)
+            public int compareTo(WeightedModel p_compareTo_1_)
             {
                 return ComparisonChain.start().compare(p_compareTo_1_.itemWeight, this.itemWeight).result();
             }
